package com.cse5236groupthirteen.models;

import com.cse5236groupthirteen.utilities.ParseHelper;
import com.parse.ParseGeoPoint;
import com.parse.ParseObject;

public class YumRestaurant {

	private YumAddress address; // cannot be NULL or Empty
	private String restaurantID; // cannot be NULL or Empty
	private String name; // cannot be NULL or Empty
	private String phoneNumber; // cannot be NULL, if Empty assume no phone number
	private String website; // cannot be NULL, if Empty assume no website
	private double geo_latitude;
	private double geo_longitude;
	
	
	public final static String R_UUID = "restaurant_id";
	public final static String R_NAME = "name";
	public final static String R_ADDR_CITY = "address_city";
	public final static String R_ADDR_STREETNUMBER = "address_number";
	public final static String R_ADDR_POSTCODE = "address_postcode";
	public final static String R_ADDR_PROVINCE = "address_province";
	public final static String R_ADDR_STREETNAME = "address_streetname";
	public final static String R_PHONENUMBER = "phonenumber";
	public final static String R_WEBSITE = "website";
	public final static String R_GEOLOC = "geo_location";
	
	/**
	 * Constructs a new Restaurant object populated with fake data
	 */
	public YumRestaurant() {
		setDefaults();
	}
	
	/**
	 * Constructs a new Restaurant object with inputed information
	 */
	public YumRestaurant(String name, YumAddress address, String phoneNumber, String website,
			double latitude, double longitude) {
		setDefaults();
		setName(name);
		setAddress(address);
		setPhoneNumber(phoneNumber);
		setWebsite(website);
		setLatitude(latitude);
		setLongitude(longitude);
	}
	
	/**
	 * Constructs a new Restaurant object with inputed information and default location
	 */
	public YumRestaurant(String name, YumAddress address, String phoneNumber, String website) {
		setDefaults();
		setName(name);
		setAddress(address);
		setPhoneNumber(phoneNumber);
		setWebsite(website);
	}
	
	/**
	 * Constructs a new Restaurant object populated with ParseObject's information
	 * @param po ParseObject that will create the Restaurant object
	 */
	public YumRestaurant(ParseObject po) {
		
		YumAddress a = new YumAddress();
		a.setStreetNumber(po.getString(R_ADDR_STREETNUMBER));
		a.setStreetName(po.getString(R_ADDR_STREETNAME));
		a.setCity(po.getString(R_ADDR_CITY));
		a.setPostCode(po.getString(R_ADDR_POSTCODE));
		a.setProvince(po.getString(R_ADDR_PROVINCE));
		
		this.restaurantID = po.getString(R_UUID);
		this.name = po.getString(R_NAME);
		this.address = a;
		this.phoneNumber = po.getString(R_PHONENUMBER);
		this.website = po.getString(R_WEBSITE);
		
		ParseGeoPoint gp = po.getParseGeoPoint(R_GEOLOC);
		if (gp != null) {
			this.geo_latitude = po.getParseGeoPoint(R_GEOLOC).getLatitude();
			this.geo_longitude = po.getParseGeoPoint(R_GEOLOC).getLongitude();
		}
		
	}
	
	private void setDefaults() {
		this.restaurantID = java.util.UUID.randomUUID().toString();
		this.name = "Fake Restaurant";
		this.address = new YumAddress();
		this.phoneNumber = "+12143965554";
		this.website = "http://google.com";
		this.geo_latitude = 0.0;
		this.geo_longitude = 0.0;
	}
	
	/**
	 * @return the Restaurant's universally unique id. This Id is generated by Java and cannot and should not be changed
	 */
	public String getRestaurantId() {
		return this.restaurantID;
	}
	
	/**
	 * @return the Restaurant's name
	 */
	public String getName() {
		return this.name;
	}

	/**
	 * @param name the name to set as the Restaurant's name, if formatted correctly
	 */
	public void setName(String name) {
		name = name.trim();
		if (isFormattedName(name)) {
			this.name = name;
		}
	}

	/**
	 * @return the Restaurant's address
	 */
	public YumAddress getAddress() {
		return address;
	}

	/**
	 * @param address the address to set as the Restaurant's address
	 */
	public void setAddress(YumAddress address) {
		this.address = address;
	}

	public String getFullAddress(){
		String addr;
		
		addr = address.getFullAddress();
		
		return addr;
	}
	
	/**
	 * @return the Restaurant's phone number
	 */
	public String getPhoneNumber() {
		return phoneNumber;
	}

	/**
	 * @param phoneNumber the phone number to set as the Restaurant's phone number, if formatted properly
	 */
	public void setPhoneNumber(String phoneNumber) {
		phoneNumber = phoneNumber.trim();
		if (isFormattedPhoneNumber(phoneNumber)) {
			this.phoneNumber = phoneNumber;
		}
	}
	
	/**
	 * @return the Restaurant's website
	 */
	public String getWebsite() {
		return website;
	}
	
	/**
	 * @param website the website to set as the Restaurant's website, if formatted correctly
	 */
	public void setWebsite(String website) {
		website = website.trim();
		if (isFormattedWebsite(website)) {
			this.website = website;
		}
	}
	
	public double getLatitude() {
		return geo_latitude;
	}

	public void setLatitude(double latitude) {
		if (isProperLatitude(latitude)) {
			this.geo_latitude = latitude;
		}
	}
	
	private boolean isProperLatitude(double latitude) {
		boolean upperBound = (latitude < 90.0);
		boolean lowerBound = (latitude > -90.0);
		return (upperBound && lowerBound);
	}

	public double getLongitude() {
		return geo_longitude;
	}

	public void setLongitude(double longitude) {
		if (isProperLongitude(longitude)) {
			this.geo_longitude = longitude;
		}
	}
	

	private boolean isProperLongitude(double longitude) {
		boolean upperBound = (longitude < 180.0);
		boolean lowerBound = (longitude > -180.0);
		return (upperBound && lowerBound);
	}

	/**
	 * To be a valid restaurant name, (for now) it must exist
	 * @param restaurantName The restaurant name that will be checked
	 */
	public static boolean isFormattedName(String restaurantName) {
		restaurantName = restaurantName.trim();
		if (restaurantName == null) {
			return false;
		}
		// TODO Add more formatting checks
		return true;
	}
	
	/**
	 * To be a valid website, (for now) it must exist
	 * @param website The website address that will be checked
	 */
	public static boolean isFormattedWebsite(String website) {
		if (website == null) {
			return false;
		}
		// TODO Add more formatting checks
		return true;
	}
	
	/**
	 * To be a valid phone number, it must start with a '+', then numerical digits
	 * @param phoneNumber phone number string to check
	 */
	public static boolean isFormattedPhoneNumber(String phoneNumber) {
		if (phoneNumber == null) {
			return false;
		}
		if (phoneNumber.length() <= 2) {
			// a phone number should have more than just a + and one digit
			return false;
		}
		
		char[] charArr = phoneNumber.toCharArray();
		
		if (charArr[0] != '+') { //checks for leading '+' 
			return false;
		}
		
		for (int i = 1; i < charArr.length; i++) { //check for only digits after '+'
			if (!Character.isDigit(charArr[i])) {
				return false;
			}
		}
		return true;
	}
	
	/**
	 * Constructs a new ParseObject object populated with this Restaurant's information
	 * @return ParseObject with this Restaurant's information
	 */
	public ParseObject toParseObject() {
		
		ParseObject toReturn = new ParseObject(ParseHelper.CLASS_RESTAURANTS);
		toReturn.put(R_UUID, this.getRestaurantId());
		toReturn.put(R_NAME, this.getName());
		toReturn.put(R_ADDR_CITY, address.getCity());
		toReturn.put(R_ADDR_STREETNUMBER, address.getStreetNumber());
		toReturn.put(R_ADDR_POSTCODE, address.getPostCode());
		toReturn.put(R_ADDR_PROVINCE, address.getProvince());
		toReturn.put(R_ADDR_STREETNAME, address.getStreetName());
		toReturn.put(R_PHONENUMBER, this.getPhoneNumber());
		toReturn.put(R_WEBSITE, this.getWebsite());
		toReturn.put(R_GEOLOC, this.getParseGeoPoint());
		return toReturn;
		
	}

	protected ParseGeoPoint getParseGeoPoint() {
		ParseGeoPoint p = new ParseGeoPoint();
		p.setLatitude(getLatitude());
		p.setLongitude(getLongitude());
		return p;
	}
	
	/**
	 * This is what gets displayed by the ListView with ArrayAdapter<Restaurant>
	 */
	@Override
	public String toString() {
		return "" + this.getName();
	}

	public void setGeoPoint(ParseGeoPoint gp) {
		
		setLatitude(gp.getLatitude());
		setLongitude(gp.getLongitude());
		
	}

	
	

}
